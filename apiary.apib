FORMAT: X-1A

HOST: https://device.ip/api/4/

# RainMachine
RainMachine API for accesing RainMachine devices. 

The RESTful interface is accessible via HTTPS on port 443 or via HTTP on port 80. Use of HTTPS is highly recommended.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a resource or list of resources

##Typical Server Responses

- 200 `OK` - The request was successful
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 460 `Cannot Change Password` - Cannot change password
- 501 `Exception Occured` - Exception occured while processing the call
- 541 `Provision Failed` - Cannot provision unit 

##Authentication

After authenticating using `POST /auth/login` [described below](# POST /auth/login), additional API calls must contain the returned `access_token` as a URL parameter.

Example: `GET /api/4/program?access_token=YOUR_ACCESS_TOKEN`

# Group API versions
## GET /apiVer
Returns the software, hardware and api level versions.
*Available on Sprinkler 1 (hwVer:1). Response: "apiVer":"4.0.0", "hwVer":"1.0", "swVer":"3.63".*
+ Response 200 (application/json)

        {
            "apiVer": "4.0.0", 
            "hwVer": 2, 
            "swVer": "4.0.219"
        }

# Group Authentication
## POST /auth/login
Request auth with the device response will include a token to be used on subsequent calls
*Available on Sprinkler 1 (hwVer:1). Response: "access_token", "statusCode", "expires_in".*
+ Request 

        {
            "pwd": "password",
            "remember": 1
        }
        
+ Response 200 (application/json)

        {
            "access_token": "fb127e22a7cd1294cf47cce8acb4cd88c87eb27236b0a3be7dfd1f82", 
            "checksum": "14245b630a7affb06f7cad6004da60c0f928545e34f7e9c3dcf81ec747937bba06a1665ff61a6923fe12e8e4cc1057c89f25735f778c9b87", 
            "expiration": "Mon, 09 Dec 2019 06:43:17 GMT", 
            "statusCode": 0
        } 

## POST /auth/change
Request a password change
*Partial support on Sprinkler 1 (hwVer:1): "newPass", "oldPass". Response: "statusCode", "message".*
+ Request

        {
                newPass: "newPass",
                oldPass: "oldPass" 
                //Optionally send "checksum" received from a /auth/login to change password without old password
        }

+ Response 200 (application/json)

        {
            "access_token": "13d45261540dc77f4cd130eaca2ce8ca7d42aa674dea76a9e2d24cd7", 
            "checksum": "266ce876ab8df7f8e0d6e503a820eab39c60d1dd4a9b9f8ffcfdd746b0cf1c28868aa13dad57b4a7d1e07b0a5b8a602095dce7e291983415", 
            "expiration": "Mon, 09 Dec 2019 06:50:03 GMT", 
            "statusCode": 0
        }

## POST /auth/check
Request a password check.
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*

+ Request

        {
            "pwd": "password"
        }

+ Response 200 (application/json)

        {
            "statusCode": 0
        } 



# Group Device provision
Device provision related functions
## /provision
### GET
Get device settings
#### System
| Variable                   | Type       | Description          |
| ---------------------------|------------|--------------------- |
| `httpEnabled`              | *boolean*  | If the HTTP server is enabled                   |
| `programZonesShowInactive` | *boolean*  | List program inactive zones in queries                  |
| `masterValveAfter`         | *integer*  | Seconds for which the master valve will open after each zone                     |
| `apiVersion`               | *string*   | Version of software API                      |
| `selfTest`                 | *boolean*  | Reserved   ( **review** )                    |
| `maxLEDBrightness`         | *integer*  | Maximum brightness for the front panel leds           |
| `masterValveBefore`        | *integer*  | Seconds for which the master valve will open before each zone                   |
| `wizardHasRun`             | *boolean*  | Indicates if the wizard from a mobile device has been run                      |
| `managedMode`              | *boolean*  | Indicates if the WIFI has been configured in client mode ( **review** )                     |
| `netName`                  | *string*   | Device Name                     |
| `keepDataHistory`          | *boolean*  | If device should keep yearly weather mixed data ( **review** )                       |
| `touchAdvanced`            | *boolean*  | Activate touch panel advanced usage that allows queueing of zones                    |
| `hardwareVersion`          | *integer*  | Hardware version of the device                     |
| `programListShowInactive`  | *boolean*  | List inactive programs in queries                     |
| `parserHistorySize`        | *integer*  | How many historic days the parsers will keep ( **review** )                       |
| `minLEDBrightness`         | *integer*  | Minimum brightness for the front panel leds                     |
| `localValveCount`          | *integer*  | Number of valves this device has available                     |
| `useCommandLineArguments`  | *boolean*  | If the application was started with extra arguments                     |
| `databasePath`             | *string*   | File system path to the databases                     |
| `zoneListShowInactive`     | *boolean*  | List inactive zones in queries                     |
| `zoneDuration`             | *integer*  | How many seconds a zone will run when started from local touch panel                    |
| `useMasterValve`           | *boolean*  | If a Master Valve is connected to Valve 1                     |
| `maxWateringCoef`          | *integer*  | How much over-watering is allowed                     |

#### Location

| Variable            | Type       | Description          |
| --------------------|------------|--------------------- |
| `elevation`         | *float*    | Terrain elevation in meters |
| `doyDownloaded`     | *boolean*  | If et0 data for each day of year has been downloaded for this location                  |
| `zip`               | *integer*  | Location ZIP  ( **review** )                     |
| `krs`               | *float*    | Adjustment coefficient used in ET0 ASCE formula  |
| `stationDownloaded` | *boolean*  | If nearby weather stations had been downloaded   |
| `state`             | *string*   | Location state                      |
| `longitude`         | *float*    | Location longitude                  |
| `windElevation`     | *integer*  | The elevation at which wind is measured for this location used in ET0 ASCE formula                      |
| `et0Average`        | *float*    | The average ET0 value for this location                  |
| `rainSensitivity`   | *float*    | How much precipitation influences ET0 formula, as percentage represented in float                      |
| `stationID`         | *integer*  | The closest weather station ID                      |
| `stationSource`     | *string*   | Where the weather station list comes from, station list or grid list                      |
| `stationName`       | *string*   | Weather station name                      |
| `address`           | *string*   | Location address                      |
| `latitude`          | *float*    | Location latitude                      |
| `timezone`          | *string*   | Timezone description                      |
| `vaporPressure`     | *float*    | Vapor pressure constant used in ET0 ASCE formula                     |
| `name`              | *string*   | Device name                     |
| `wsDays`            | *integer*  | Day period for which the water savings are taken in account                      |


+ Response 200 (application/json)

        {
          "system": 
            {
                "httpEnabled": true, 
                "programZonesShowInactive": false, 
                "masterValveAfter": 10, 
                "zoneListShowInactive": true, 
                "selfTest": false, 
                "maxLEDBrightness": 80, 
                "masterValveBefore": 10, 
                "wizardHasRun": true, 
                "managedMode": false, 
                "netName": "Rainmachine", 
                "apiVersion": "4.0.0", 
                "keepDataHistory": false, 
                "hardwareVersion": 2, 
                "programListShowInactive": true, 
                "parserHistorySize": 365, 
                "minLEDBrightness": 0, 
                "localValveCount": 8, 
                "useCommandLineArguments": true, 
                "databasePath": "/indevel/rainmachine2/rainmachine/DB/Fresno", 
                "touchAdvanced": false, 
                "zoneDuration": 60, 
                "useMasterValve": false, 
                "maxWateringCoef": 2
            }, 
          "location": 
            {
                "stationID": 9599, 
                "elevation": 2.0, 
                "doyDownloaded": true, 
                "zip": null, 
                "krs": 0.19, 
                "longitude": -119.776022, 
                "state": "Default", 
                "stationSource": "station", 
                "et0Average": 7.47, 
                "latitude": 36.755419, 
                "windElevation": 2, 
                "stationName": "FRESNO YOSEMITE INT'L", 
                "wsDays": 2, 
                "stationDownloaded": true, 
                "address": "Default", 
                "rainSensitivity": 0.8, 
                "timezone": "America/Los_Angeles", 
                "vaporPressure": 1.4, 
                "name": "Fresno"
            }
        }

### POST
Sets device provision settings. See above for parameter explanation.

+ Request (application/json)

        {
          "system": 
            {
                "httpEnabled": true, 
                "programZonesShowInactive": false, 
                "masterValveAfter": 10, 
                "zoneListShowInactive": true, 
                "selfTest": false, 
                "maxLEDBrightness": 80, 
                "masterValveBefore": 10, 
                "wizardHasRun": true, 
                "managedMode": false, 
                "netName": "Rainmachine", 
                "apiVersion": "4.0.0", 
                "keepDataHistory": false, 
                "hardwareVersion": 2, 
                "programListShowInactive": true, 
                "parserHistorySize": 365, 
                "minLEDBrightness": 0, 
                "localValveCount": 8, 
                "useCommandLineArguments": true, 
                "databasePath": "/indevel/rainmachine2/rainmachine/DB/Fresno", 
                "touchAdvanced": false, 
                "zoneDuration": 60, 
                "useMasterValve": false, 
                "maxWateringCoef": 2
            }, 
          "location": 
            {
                "stationID": 9599, 
                "elevation": 2.0, 
                "doyDownloaded": true, 
                "zip": null, 
                "krs": 0.19, 
                "longitude": -119.776022, 
                "state": "Default", 
                "stationSource": "station", 
                "et0Average": 7.47, 
                "latitude": 36.755419, 
                "windElevation": 2, 
                "stationName": "FRESNO YOSEMITE INT'L", 
                "wsDays": 2, 
                "stationDownloaded": true, 
                "address": "Default", 
                "rainSensitivity": 0.8, 
                "timezone": "America/Los_Angeles", 
                "vaporPressure": 1.4, 
                "name": "Fresno"
            }
        }
        
+ Response 200 (application/json)

        {
            "statusCode": 0 
        }

## /provision/name
### GET
Returns device name (short cut to provision.system.name
+ Response 200 (application/json)

        {"name": "Test-CIMIS"}

## POST
Sets device name
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*
+ Response 200 (application/json)
        
        {
            "statusCode": 0 
        }


## GET /provision/wifi
Returns current WIFI configuration 
+ Response 200 (application/json)

        {
          "interface": "wlan0", 
          "macAddress": "18:c8:e7:81:a2:6e", 
          "ipAddress": "192.168.12.126", 
          "hasClientLink": true, 
          "mode": "managed"
        }

## GET /provision/wifi/scan
Returns Access Points in range with RainMachine 
+ Response 200 (application/json)

        {
          "scanResults": [
            {
              "SSID": "LinuxConsulting", 
              "isEncrypted": true, 
              "signal": "-52", 
              "isWEP": false, 
              "BSS": "00:23:69:F9:55:D1", 
              "isWPA": false, 
              "isWPA2": true, 
              "channel": "3"
            },    
            {
              "SSID": "RainMachine", 
              "isEncrypted": false, 
              "signal": "-41", 
              "isWEP": false, 
              "BSS": "1A:C8:E7:81:9A:B8", 
              "isWPA": false, 
              "isWPA2": false, 
              "channel": "11"
            }    
          ]
        }

## POST /provision/wifi/settings
Sets the Access Point to which RainMachine will connect to and network settings such as ip, netmask, gateway unless networkType is set as dhcp
+ Response 200 (application/json)

        {
            "statusCode": 0 
        }

# Group Watering Programs
## /program
### GET
Get all watering programs defined on device
*Partial support on Sprinkler 1 (hwVer:1): "uid", "name", "active", "startTime", "cycles", "soak", "cs_on", "delay", "delay_on", "status", "frequency", "ignoreInternetWeather", "futureField1", "freq_modified", "nextRun", "wateringTimes".*

+ response 200 (application/json)

        {
          "programs": [
            {
              "uid": 1, 
              "name": "Daily program", 
              "active": true, 
              "startTime": "00:30", 
              "cycles": 3, 
              "soak": 4, 
              "cs_on": true, 
              "delay": 3, 
              "delay_on": true, 
              "status": 0, 
              "frequency": {
                "type": 0, 
                "param": "0"
              }, 
              "coef": 0.0, 
              "ignoreInternetWeather": false, 
              "futureField1": 0, 
              "freq_modified": 0, 
              "useWaterSense": false, 
              "nextRun": "2014-11-11", 
              "wateringTimes": [
                {
                  "id": 1, 
                  "name": "Zone 1", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 8, 
                  "name": "Zone 8", 
                  "duration": 90, 
                  "active": true
                }
              ]
            }
          ]
        }
        
### POST
Create a new Program (program id will be automatically generated)
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*

+ Response 200 (application/json)

        { "statusCode": 0 }

## GET /program/nextrun
Returns next running date/time for all active programs
*Available on Sprinkler 1 (hwVer:1).*

+ Response 200 (application/json)

        {
            "nextRuns": [
                {
                    "pid": 31,
                    "startTime": "05:55"
                },
                {
                    "pid": 33,
                    "startTime": "11:22"
                }
            ]
        }

##/program/{id}

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
### GET
Get program with specified id
*Partial support on Sprinkler 1 (hwVer:1): "uid", "name", "active", "startTime", "cycles", "soak", "cs_on", "delay", "delay_on", "status", "frequency", "ignoreInternetWeather", "futureField1", "freq_modified", "nextRun", "wateringTimes".*

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Daily program", 
          "active": true, 
          "startTime": "00:30", 
          "cycles": 3, 
          "soak": 4, 
          "cs_on": true, 
          "delay": 3, 
          "delay_on": true, 
          "status": 0, 
          "frequency": {
            "type": 0, 
            "param": "0"
          }, 
          "coef": 0.0, 
          "ignoreInternetWeather": false, 
          "futureField1": 0, 
          "freq_modified": 0, 
          "useWaterSense": false, 
          "nextRun": "2014-11-11", 
          "wateringTimes": [
            {
              "id": 1, 
              "name": "Zone 1", 
              "duration": 0, 
              "active": false
            }, 
            {
              "id": 8, 
              "name": "Zone 8", 
              "duration": 90, 
              "active": true
            }
          ]
        }

### POST
Update program parameters with specified id
*Partial support on Sprinkler 1 (hwVer:1): "uid", "name", "active", "startTime", "cycles", "soak", "cs_on", "delay", "delay_on", "status", "frequency", "ignoreInternetWeather", "futureField1", "freq_modified", "nextRun", "wateringTimes". Response: "statusCode", "message".*
+ Response 200 (application/json)

        {}

## POST /program/{id}/delete
Delete Program with id
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
+ Response 200 (application/json)

        {}
        
## POST /program/{id}/start
Start watering Program with id
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve

+ Response 200 (application/json)

        {}

## POST /program/{id}/stop
Remove Program with id from watering queue
*Available on Sprinkler 1 (hwVer:1).*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
+ Response 200 (application/json)

        {}

# Group Watering Zones
## GET /zone

Returns a list of *all* zones and their generic properties
*Partial support on Sprinkler 1 (hwVer:1): "uid", "name", "state", "remaining", "type", "master".*
+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }
          ]
        }
        
## GET /zone/properties
Returns advanced properties for *all* zones
*Partial support on Sprinkler 1 (hwVer:1): "uid", "name", "active", "type", "internet", "history", "master", "before", "after".*

+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "valveid": 1, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "valveid": 2, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "valveid": 3, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "valveid": 4, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "valveid": 5, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "valveid": 6, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "valveid": 7, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "valveid": 8, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }
          ]
        }

        
## /zone/{id}/properties
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water

### GET
Retrieve properties for zone with id
*Partial support on Sprinkler 1 (hwVer:1): "uid", "name", "active", "type", "internet", "history", "master", "before", "after".*

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Zone 1", 
          "valveid": 1, 
          "ETcoef": 1, 
          "active": true, 
          "type": 1, 
          "internet": true, 
          "savings": 50, 
          "slope": 1, 
          "sun": 1, 
          "soil": 1, 
          "group_id": 0, 
          "history": true, 
          "master": false, 
          "before": 10, 
          "after": 10
        }

### POST
Set properties for zone with id
*Partial support on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*

+ Response 200 (application/json)

        {  }

## POST /zone/{id}/start
Start watering zone with id
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water

+ Response 200 (application/json)

        {}
        
## POST /zone/{id}/stop
Stop watering zone with id
*Available on Sprinkler 1 (hwVer:1). Response: "statusCode", "message".*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to stop watering

+ Response 200 (application/json)

        {}

# Group Watering Information
## GET /watering/zone
Returns status of watering on *all* zones
+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }
          ]
        }

## GET /watering/program
Returns the running watering program if any

+ Response 200 (application/json)

        { "programs": [] }

## GET /watering/queue
Returns the entire current watering queue

+ Response 200 (application/json)

        { "queue": []  }
        
## GET /watering/past
Returns the et0 and qpf values used on the last runs of programs, including the date on which the programs started

+ Response 200 (application/json)

        {
          "pastValues": [
            {
              "pid": 1, 
              "dateTimestamp": 1418025600, 
              "dateTime": "2014-12-08 00:00:00", 
              "used": 1, 
              "et0": 0.7508403396708584, 
              "qpf": 0
            }
          ]
        }

## GET /watering/available
Returns the available water in soil for each zone

+ Response 200 (application/json)

        {
          "availableWaterValues": [
            {
              "dateTime": "2014-12-08 00:00:00", 
              "day": 1418025600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.60317710318884
            }, 
            {
              "dateTime": "2014-12-07 00:00:00", 
              "day": 1417939200, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.653164729968374
            }, 
            {
              "dateTime": "2014-12-06 00:00:00", 
              "day": 1417852800, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.40323269049864
            }, 
            {
              "dateTime": "2014-12-05 00:00:00", 
              "day": 1417766400, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.469913502450538
            }, 
            {
              "dateTime": "2014-12-03 00:00:00", 
              "day": 1417593600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }, 
            {
              "dateTime": "2014-12-02 00:00:00", 
              "day": 1417507200, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }, 
            {
              "dateTime": "2014-11-28 00:00:00", 
              "day": 1417161600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }
          ]
        }



# Group Watering Restrictions   
Watering Restriction Hourly, Daily, Weekly, Monthly and Freeze Control/Rain Delay

## /restrictions/global
### GET
Returns global watering restrictions
+ Response 200 (application/json)

        {
          "hotDaysExtraWatering": false, //Enable watering over 100% of the user specified time
          "freezeProtectEnabled": false,
          "freezeProtectTemp": 2, 
          "noWaterInWeekDays": "0000000", 
          "noWaterInMonths": "000000000000", 
          "rainDelayStartTime": -1,  //Program a rain delay to take place at the specified time
          "rainDelayDuration": 0
        }

### POST
Sets global watering restrictions

## /restrictions/hourly
### GET
Returns hourly restrictions for watering
### POST
Sets a new hourly restriction

## POST /restrictions/hourly/{id}/delete
Removes an hourly restriction

##/restrictions/raindelay
### GET
Returns the number of seconds until the forced Rain Delay mode is finished
*Available on Sprinkler 1 (hwVer:1).*
+ Response 200 (application/json)

        {
          "delayCounter": 86397
        }

### POST
Sets the number of days for which a Rain Delay is wanted
*Available on Sprinkler 1 (hwVer:1).*

# Group Daily Stats
Daily Statistics and Weather
##/dailystats
### GET
Returns daily statistics about simulated watering. It has 14 historical days (older negative id) and 7 days in the future (pozitive id, id 0 is today). 
Statistics are built from mixer and simulator data. 

| Variable                   | Type       | Description          |
| ---------------------------|------------|--------------------- |
| `id`                       | *int*      | Day offset relative to today which is 0. Negative  values are in the past. Positive in the future |
| `wateringFlag`             | *int*      | ( **review** )  |
| `day`                      | *string*   | Day in YYYY-MM-DD format |
| `mint`                     | *float*    | Minimum temperature of the day |
| `maxt`                     | *float*    | Maximum temperature of the day |
| `icon`                     | *int*      | Weather icon for that day (see icon definitions) |
| `percentage`               | *int*      | How much it actually waters |
| `simulatedPercentage`      | *int*      | How much it would water if a daily program would be configured  |
| `vibration`                | *array of int*      | How the watering `percetage` varies with historical and future weather predictions |
| `simulatedVibration`       | *array of int*      | As above but if a daily program would be configured |

*Partial support on Sprinkler 1 (hwVer:1): "vibration" not available.*


+ Response 200 (application/json)

        {
          "WeatherData": 
            [
            {
              "id": -1, 
              "day": "2014-11-30", 
              "mint": 9.9, 
              "maxt": 21.9, 
              "icon": null, 
              "percentage": 0, 
              "wateringFlag": 0, 
              "vibration": [
                56, 
                56, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0
              ], 
              "simulatedPercentage": 16.33062599489387, 
              "simulatedVibration": [
                16
              ]
            },
            {
              "id": 0, 
              "day": "2014-12-01", 
              "mint": 6.9, 
              "maxt": 21.9, 
              "icon": null, 
              "percentage": 0, 
              "wateringFlag": 0, 
              "vibration": [
                56, 
                56, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0
              ], 
              "simulatedPercentage": 16.33062599489387, 
              "simulatedVibration": [
                16
              ]
            },
            {
              "id": 1, 
              "day": "2014-12-02", 
              "mint": 6.9, 
              "maxt": 21.9, 
              "icon": null, 
              "percentage": 0, 
              "wateringFlag": 0, 
              "vibration": [
                56, 
                56, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0
              ], 
              "simulatedPercentage": 16.33062599489387, 
              "simulatedVibration": [
                16
              ]
            }
            ]
        }

##/dailystats/{date}
###GET
*Partial support on Sprinkler 1 (hwVer:1): "vibration" not available.*
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
+ Response 200 (application/json)

        {
              "id": 1, 
              "day": "2014-12-02", 
              "mint": 6.9, 
              "maxt": 21.9, 
              "icon": null, 
              "percentage": 0, 
              "wateringFlag": 0, 
              "vibration": [
                56, 
                56, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0
              ], 
              "simulatedPercentage": 16.33062599489387, 
              "simulatedVibration": [
                16
              ]
        }

# Group Weather Parsers
Parsers information, data and parameters
##/parser
###GET
Returns information about all weather parsers available
+ Response 200 (application/json)

        {
          "parsers": [
            {
              "lastRun": "2014-12-08 00:07:13", 
              "enabled": true, 
              "uid": 1, 
              "name": "NOAA Parser"
            }, 
            {
              "lastRun": "2014-12-08 00:08:21", 
              "params": {
                "appKey": "523cf689-7ba6-47bd-a2be-6dc1c1ba9afb", 
                "station": 2, 
                "historicDays": 5, 
                "customStation": true
              }, 
              "enabled": true, 
              "uid": 3, 
              "name": "CIMIS Parser"
            }, 
            {
              "lastRun": "2014-12-08 00:07:13", 
              "params": {
                "appKey": "922309bbf729baba82616dca01572d3057eead89", 
                "useProxy": true
              }, 
              "enabled": true, 
              "uid": 5, 
              "name": "ForecastIO Parser"
            }, 
            {
              "lastRun": null, 
              "enabled": false, 
              "uid": 4, 
              "name": "My Example Parser"
            }, 
            {
              "lastRun": null, 
              "enabled": false, 
              "uid": 2, 
              "name": "Simulator Parser"
            }
          ]
        }

##/parser/{id}
###GET 
Returns detalied information about parser
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the parser
+ Response 200 (application/json)

        {
          "parser": {
            "lastRun": null, 
            "params": {
              "station": 2, 
              "customStation": true, 
              "historicDays": 5
            }, 
            "enabled": false, 
            "uid": 2, 
            "name": "CIMIS Parser"
          }
        }

## GET /parser/{id}/data
## GET /parser/{id}/data/{date}
## GET /parser/{id}/data/{date}/{days}
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return


## POST /parser/{id}/activate
## POST /parser/{id}/params

# Group Weather Mixed Data
Mixed weather data from parsers
## GET /mixer
Return all available mixer data
## GET /mixer/{date}
## GET /mixer/{date}/{days}
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return

# Group Diagnostics
Software diagnostics, logs and status
##/diag
###GET
Returns software status
##/diag/upload
###GET
Returns diagnostics upload status
###POST
Starts diagnostics upload to RainMachine support server
##/diag/download
###GET
Retrieves an archive with logs and databases from RainMachine
*Available on Sprinkler 1 (hwVer:1).*

# Group Machine
## /machine/time
### GET
Returns the time on machine
*Available on Sprinkler 1 (hwVer:1).*
### POST
Changes the time on machine
*Available on Sprinkler 1 (hwVer:1).*
## /machine/update
### GET
Returns software update status
*Available on Sprinkler 1 (hwVer:1).*
### POST
Initiates a software update
*Available on Sprinkler 1 (hwVer:1).*
##/machine/sysupgrade
###POST
Initiate a firmware download and install
## /machine/reboot
### POST
Initiates a system reboot
*Available on Sprinkler 1 (hwVer:1).*
## /machine/ssh
### POST
Disable/Enable ssh daemon
## /machine/touch
### POST
Disable/Enable touch interface. Use if you want a 3rd party application to control the leds/touch buttons

